# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/gui/mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.12.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(858, 603)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.scroll = QtWidgets.QScrollArea(self.centralwidget)
        self.scroll.setWidgetResizable(True)
        self.scroll.setObjectName("scroll")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 588, 552))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scroll.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_4.addWidget(self.scroll, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 858, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockLabel = QtWidgets.QDockWidget(MainWindow)
        self.dockLabel.setFeatures(QtWidgets.QDockWidget.NoDockWidgetFeatures)
        self.dockLabel.setObjectName("dockLabel")
        self.labelListContainer = QtWidgets.QWidget()
        self.labelListContainer.setObjectName("labelListContainer")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.labelListContainer)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.listLayout = QtWidgets.QVBoxLayout()
        self.listLayout.setObjectName("listLayout")
        self.diffcButton = QtWidgets.QCheckBox(self.labelListContainer)
        self.diffcButton.setObjectName("diffcButton")
        self.listLayout.addWidget(self.diffcButton)
        self.editButton = QtWidgets.QToolButton(self.labelListContainer)
        self.editButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.editButton.setObjectName("editButton")
        self.listLayout.addWidget(self.editButton)
        self.useDefaultLabelQHBoxLayout = QtWidgets.QHBoxLayout()
        self.useDefaultLabelQHBoxLayout.setObjectName("useDefaultLabelQHBoxLayout")
        self.useDefaultLabelCheckbox = QtWidgets.QCheckBox(self.labelListContainer)
        self.useDefaultLabelCheckbox.setObjectName("useDefaultLabelCheckbox")
        self.useDefaultLabelQHBoxLayout.addWidget(self.useDefaultLabelCheckbox)
        self.defaultLabelTextLine = QtWidgets.QLineEdit(self.labelListContainer)
        self.defaultLabelTextLine.setObjectName("defaultLabelTextLine")
        self.useDefaultLabelQHBoxLayout.addWidget(self.defaultLabelTextLine)
        self.listLayout.addLayout(self.useDefaultLabelQHBoxLayout)
        self.labelList = QtWidgets.QListWidget(self.labelListContainer)
        self.labelList.setObjectName("labelList")
        self.listLayout.addWidget(self.labelList)
        self.countLabel = QtWidgets.QLabel(self.labelListContainer)
        self.countLabel.setObjectName("countLabel")
        self.listLayout.addWidget(self.countLabel)
        self.gridLayout_2.addLayout(self.listLayout, 0, 0, 1, 1)
        self.dockLabel.setWidget(self.labelListContainer)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockLabel)
        self.filedock = QtWidgets.QDockWidget(MainWindow)
        self.filedock.setFeatures(QtWidgets.QDockWidget.NoDockWidgetFeatures)
        self.filedock.setObjectName("filedock")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.dockWidgetContents_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.fileListWidget = QtWidgets.QListWidget(self.dockWidgetContents_3)
        self.fileListWidget.setObjectName("fileListWidget")
        self.verticalLayout.addWidget(self.fileListWidget)
        self.gridLayout_3.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.filedock.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.filedock)
        self.quit = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/quit")
        self.quit.setIcon(icon)
        self.quit.setObjectName("quit")
        self.open = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/open")
        self.open.setIcon(icon)
        self.open.setObjectName("open")
        self.opendir = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/open")
        self.opendir.setIcon(icon)
        self.opendir.setObjectName("opendir")
        self.changeSavedir = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/open")
        self.changeSavedir.setIcon(icon)
        self.changeSavedir.setObjectName("changeSavedir")
        self.openAnnotation = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/open")
        self.openAnnotation.setIcon(icon)
        self.openAnnotation.setObjectName("openAnnotation")
        self.openNextImgAction = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/next")
        self.openNextImgAction.setIcon(icon)
        self.openNextImgAction.setObjectName("openNextImgAction")
        self.openPrevImgAction = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/prev")
        self.openPrevImgAction.setIcon(icon)
        self.openPrevImgAction.setObjectName("openPrevImgAction")
        self.verify = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/verify")
        self.verify.setIcon(icon)
        self.verify.setObjectName("verify")
        self.save = QtWidgets.QAction(MainWindow)
        self.save.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/save")
        self.save.setIcon(icon)
        self.save.setObjectName("save")
        self.save_format = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/format_voc")
        self.save_format.setIcon(icon)
        self.save_format.setObjectName("save_format")
        self.saveAs = QtWidgets.QAction(MainWindow)
        self.saveAs.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/save-as")
        self.saveAs.setIcon(icon)
        self.saveAs.setObjectName("saveAs")
        self.closeAction = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/close")
        self.closeAction.setIcon(icon)
        self.closeAction.setObjectName("closeAction")
        self.resetAllAction = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/resetall")
        self.resetAllAction.setIcon(icon)
        self.resetAllAction.setObjectName("resetAllAction")
        self.color1 = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/color")
        self.color1.setIcon(icon)
        self.color1.setObjectName("color1")
        self.createMode = QtWidgets.QAction(MainWindow)
        self.createMode.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/new")
        self.createMode.setIcon(icon)
        self.createMode.setObjectName("createMode")
        self.editMode = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/icons/edit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.editMode.setIcon(icon)
        self.editMode.setObjectName("editMode")
        self.create = QtWidgets.QAction(MainWindow)
        self.create.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/new")
        self.create.setIcon(icon)
        self.create.setObjectName("create")
        self.deleteAction = QtWidgets.QAction(MainWindow)
        self.deleteAction.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/delete")
        self.deleteAction.setIcon(icon)
        self.deleteAction.setObjectName("deleteAction")
        self.copy = QtWidgets.QAction(MainWindow)
        self.copy.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/copy")
        self.copy.setIcon(icon)
        self.copy.setObjectName("copy")
        self.detect = QtWidgets.QAction(MainWindow)
        self.detect.setEnabled(False)
        icon = QtGui.QIcon.fromTheme(":/new")
        self.detect.setIcon(icon)
        self.detect.setObjectName("detect")
        self.advancedMode = QtWidgets.QAction(MainWindow)
        self.advancedMode.setCheckable(True)
        icon = QtGui.QIcon.fromTheme(":/expert")
        self.advancedMode.setIcon(icon)
        self.advancedMode.setObjectName("advancedMode")
        self.hideAll = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/hide")
        self.hideAll.setIcon(icon)
        self.hideAll.setObjectName("hideAll")
        self.showAll = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme(":/hide")
        self.showAll.setIcon(icon)
        self.showAll.setObjectName("showAll")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Active Image Labeler"))
        self.dockLabel.setWindowTitle(_translate("MainWindow", "Box Labels"))
        self.diffcButton.setText(_translate("MainWindow", "difficult"))
        self.editButton.setText(_translate("MainWindow", "..."))
        self.useDefaultLabelCheckbox.setText(_translate("MainWindow", "Use default label"))
        self.countLabel.setText(_translate("MainWindow", "TextLabel"))
        self.filedock.setWindowTitle(_translate("MainWindow", "File List"))
        self.quit.setText(_translate("MainWindow", "Quit"))
        self.quit.setToolTip(_translate("MainWindow", "Quit application"))
        self.quit.setStatusTip(_translate("MainWindow", "Quit application"))
        self.quit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.open.setText(_translate("MainWindow", "Open"))
        self.open.setToolTip(_translate("MainWindow", "Open image or label file"))
        self.open.setStatusTip(_translate("MainWindow", "Open image or label file"))
        self.open.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.opendir.setText(_translate("MainWindow", "Open Dir"))
        self.opendir.setToolTip(_translate("MainWindow", "Open Directory"))
        self.opendir.setStatusTip(_translate("MainWindow", "Open Directory"))
        self.opendir.setWhatsThis(_translate("MainWindow", "Open Directory"))
        self.opendir.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.changeSavedir.setText(_translate("MainWindow", "Change Save Dir"))
        self.changeSavedir.setToolTip(_translate("MainWindow", "Change default saved Annotation dir"))
        self.changeSavedir.setStatusTip(_translate("MainWindow", "Change default saved Annotation dir"))
        self.changeSavedir.setWhatsThis(_translate("MainWindow", "Change default saved Annotation dir"))
        self.changeSavedir.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.openAnnotation.setText(_translate("MainWindow", "openAnnotation"))
        self.openAnnotation.setToolTip(_translate("MainWindow", "Open an annotation file"))
        self.openAnnotation.setStatusTip(_translate("MainWindow", "Open an annotation file"))
        self.openAnnotation.setWhatsThis(_translate("MainWindow", "Open an annotation file"))
        self.openAnnotation.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))
        self.openNextImgAction.setText(_translate("MainWindow", "Next Image"))
        self.openNextImgAction.setToolTip(_translate("MainWindow", "Open the next Image"))
        self.openNextImgAction.setStatusTip(_translate("MainWindow", "Open the next Image"))
        self.openNextImgAction.setWhatsThis(_translate("MainWindow", "Open the next Image"))
        self.openNextImgAction.setShortcut(_translate("MainWindow", "D"))
        self.openPrevImgAction.setText(_translate("MainWindow", "Previous Image"))
        self.openPrevImgAction.setToolTip(_translate("MainWindow", "Open the previous Image"))
        self.openPrevImgAction.setStatusTip(_translate("MainWindow", "Open the previous Image"))
        self.openPrevImgAction.setWhatsThis(_translate("MainWindow", "Open the previous Image"))
        self.openPrevImgAction.setShortcut(_translate("MainWindow", "A"))
        self.verify.setText(_translate("MainWindow", "Verify Image"))
        self.verify.setStatusTip(_translate("MainWindow", "Verify Image"))
        self.verify.setWhatsThis(_translate("MainWindow", "Verify Image"))
        self.verify.setShortcut(_translate("MainWindow", "Space"))
        self.save.setText(_translate("MainWindow", "Save"))
        self.save.setStatusTip(_translate("MainWindow", "Save the labels to a file"))
        self.save.setWhatsThis(_translate("MainWindow", "Save the labels to a file"))
        self.save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.save_format.setText(_translate("MainWindow", "Save Format"))
        self.saveAs.setText(_translate("MainWindow", "Save As"))
        self.saveAs.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.closeAction.setText(_translate("MainWindow", "Close"))
        self.closeAction.setToolTip(_translate("MainWindow", "Close the current file"))
        self.closeAction.setShortcut(_translate("MainWindow", "Ctrl+W"))
        self.resetAllAction.setText(_translate("MainWindow", "resetAll"))
        self.color1.setText(_translate("MainWindow", "color1"))
        self.createMode.setText(_translate("MainWindow", "Create\\nRectBox"))
        self.createMode.setIconText(_translate("MainWindow", "Create\n"
"RectBox"))
        self.createMode.setToolTip(_translate("MainWindow", "Draw a new box"))
        self.createMode.setStatusTip(_translate("MainWindow", "Draw a new box"))
        self.createMode.setWhatsThis(_translate("MainWindow", "Draw a new box"))
        self.createMode.setShortcut(_translate("MainWindow", "W"))
        self.editMode.setText(_translate("MainWindow", "Edit Label"))
        self.editMode.setToolTip(_translate("MainWindow", "Modify the label of the selected Box"))
        self.editMode.setShortcut(_translate("MainWindow", "Ctrl+J"))
        self.create.setText(_translate("MainWindow", "create"))
        self.create.setShortcut(_translate("MainWindow", "W"))
        self.deleteAction.setText(_translate("MainWindow", "delete"))
        self.deleteAction.setShortcut(_translate("MainWindow", "Backspace"))
        self.copy.setText(_translate("MainWindow", "copy"))
        self.copy.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.detect.setText(_translate("MainWindow", "detect"))
        self.detect.setShortcut(_translate("MainWindow", "Ctrl+Shift+D"))
        self.advancedMode.setText(_translate("MainWindow", "advancedMode"))
        self.advancedMode.setShortcut(_translate("MainWindow", "Ctrl+Shift+A"))
        self.hideAll.setText(_translate("MainWindow", "Hide all bounding boxes"))
        self.hideAll.setStatusTip(_translate("MainWindow", "Hide all bounding boxes"))
        self.hideAll.setWhatsThis(_translate("MainWindow", "Hide all bounding boxes"))
        self.hideAll.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.showAll.setText(_translate("MainWindow", "Show all bounding boxes"))
        self.showAll.setStatusTip(_translate("MainWindow", "Show all bounding boxes"))
        self.showAll.setWhatsThis(_translate("MainWindow", "Show all bounding boxes"))
        self.showAll.setShortcut(_translate("MainWindow", "Ctrl+A"))




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
